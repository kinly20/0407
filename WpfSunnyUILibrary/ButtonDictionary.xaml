<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.fontawesome.io/icons/">

    <Style x:Key="menuButton" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0 7 0 0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="90" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#a9a9a9" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="15" Padding="15">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#AC0F0F" />
                <Setter Property="Foreground" Value="#FFFFFF" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="#921C1B" />
                <Setter Property="Foreground" Value="#FFFFFF" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DownmenuButton" TargetType="{x:Type Button}">

        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="100" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#a9a9a9" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="15" BorderBrush="#a9a9a9" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="menuButtonSelect" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0 10 0 0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="100" />
        <Setter Property="Background" Value="#AC0F0F" />
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="15" Padding="15">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#AC0F0F" />
                <Setter Property="Foreground" Value="#FFFFFF" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="#921C1B" />
                <Setter Property="Foreground" Value="#FFFFFF" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="menuButtonIcon" TargetType="fa:ImageAwesome">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
    </Style>


    <Style x:Key="menuButtonText" TargetType="TextBlock">
        <Setter Property="Margin" Value="0 7 0 0" />
    </Style>


    <Style x:Key="button" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="170" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="5" BorderBrush="#202934" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#202934" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="Black" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

   
    

    <Style x:Key="Normalbutton" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="15" BorderBrush="#202934" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#202934" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="Black" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    
    
    <Style x:Key="NormalbuttonCircle" TargetType="Button">
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="55" BorderBrush="#202934" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#202934" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="Black" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

   

    
    <Style x:Key="NormalbuttonRact" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="1" BorderBrush="#202934" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#202934" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="Black" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Colorbutton" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="15" BorderBrush="{Binding BorderColor}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonCircle" TargetType="Button">
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Background" Value="{Binding ButtonBackColor}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="55" BorderBrush="{Binding BorderColor}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonRact" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="1" BorderBrush="{Binding BorderColor}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Colorbutton2" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor2}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="15" BorderBrush="{Binding BorderColor2}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor2}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor2}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonCircle2" TargetType="Button">
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Background" Value="{Binding ButtonBackColor2}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="55" BorderBrush="{Binding BorderColor2}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor2}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor2}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonRact2" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor2}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="1" BorderBrush="{Binding BorderColor2}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor2}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor2}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Colorbutton3" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor3}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="15" BorderBrush="{Binding BorderColor3}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor3}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor3}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonCircle3" TargetType="Button">
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Background" Value="{Binding ButtonBackColor3}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="55" BorderBrush="{Binding BorderColor3}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor3}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor3}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonRact3" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor3}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="1" BorderBrush="{Binding BorderColor3}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor3}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor3}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Colorbutton4" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor4}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="15" BorderBrush="{Binding BorderColor4}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor4}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor4}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonCircle4" TargetType="Button">
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Background" Value="{Binding ButtonBackColor4}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="55" BorderBrush="{Binding BorderColor4}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor4}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor4}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonRact4" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor4}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="1" BorderBrush="{Binding BorderColor4}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor4}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor4}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Colorbutton5" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor5}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="15" BorderBrush="{Binding BorderColor5}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor5}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor5}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonCircle5" TargetType="Button">
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Background" Value="{Binding ButtonBackColor5}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="55" BorderBrush="{Binding BorderColor5}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor5}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor5}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorbuttonRact5" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="{Binding ButtonBackColor5}" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="1" BorderBrush="{Binding BorderColor5}" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor5}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor5}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ImagebuttonRact" TargetType="Button">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="1" BorderBrush="Transparent" Padding="0 0 0 0" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding MouseOverColor}" />
                <Setter Property="Foreground" Value="#e9e9e9" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{Binding MouseCapturedColor}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="buttonImage" TargetType="Image">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="18" />
        <Setter Property="Stretch" Value="Fill" />
    </Style>
    
    <Style x:Key="buttonIcon" TargetType="fa:ImageAwesome">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="18" />
    </Style>

  

    <Style x:Key="buttonIconWhite" TargetType="fa:ImageAwesome">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="18" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="buttonText" TargetType="TextBlock">
        <Setter Property="Margin" Value="0 0 0 0" />
        <Setter Property="FontSize" Value="14" />
        <!--<Setter Property="Foreground" Value="#555555" />-->
    </Style>

    <Style x:Key="buttonTextWhite" TargetType="TextBlock">
        <Setter Property="Margin" Value="0 0 0 0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="buttonTextWithIcon" TargetType="TextBlock">
        <Setter Property="Margin" Value="10 0 0 0" />
        <Setter Property="FontSize" Value="14" />
        <!--<Setter Property="Foreground" Value="#555555" />-->
    </Style>

    <Style x:Key="buttonTextWhiteWithIcon" TargetType="TextBlock">
        <Setter Property="Margin" Value="10 0 0 0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="CloseBtnStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="columnDefinition1" Width="0.982*"/>
                            <ColumnDefinition x:Name="columnDefinition" Width="0.018*"/>
                        </Grid.ColumnDefinitions>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="{x:Null}" Fill="#F21260" Grid.ColumnSpan="2"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#F58220"/>
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="#F58269"/>
                            <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#F56818"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#F61818"/>
                            <Setter Property="Width" TargetName="columnDefinition" Value="Auto"/>
                            <Setter Property="MinWidth" TargetName="columnDefinition" Value="0"/>
                            <Setter Property="Width" TargetName="columnDefinition1" Value="*"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Stroke" TargetName="rectangle" Value="{x:Null}"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ArrowToggleStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="Gray"/>
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}">
                        <Grid>
                            <Image x:Name="leftArrowImg"  Source="/Image/OpenE.png"   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Image x:Name="rightArrowImg" Source="/Image/CloseE.png"   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="content1" Content="not selected" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="content2" Content="SELECTED" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="DimGray"/>
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleStyleE" TargetType="ToggleButton">
        <Setter Property="Background" Value="{Binding ButtonBackColor}"/>
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="15" BorderThickness="1">
                        <Grid >
                            <fa:ImageAwesome x:Name="leftArrowImg" Icon="ToggleOn" Style="{StaticResource buttonIconWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center" Margin="15 0 0 0" />
                            <TextBlock x:Name="content1" Text="On" Style="{StaticResource buttonTextWhiteWithIcon}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="40 0 0 0" />

                            <fa:ImageAwesome x:Name="rightArrowImg" Icon="ToggleOff" Style="{StaticResource buttonIconWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="15 0 0 0"/>
                            <TextBlock x:Name="content2" Text="Off" Style="{StaticResource buttonTextWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="40 0 0 0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="DimGray"/>
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleStyleERact" TargetType="ToggleButton">
        <Setter Property="Background" Value="{Binding ButtonBackColor}"/>
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="1" BorderThickness="1">
                        <Grid >
                            <fa:ImageAwesome x:Name="leftArrowImg" Icon="ToggleOn" Style="{StaticResource buttonIconWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center" Margin="15 0 0 0" />
                            <TextBlock x:Name="content1" Text="On" Style="{StaticResource buttonTextWhiteWithIcon}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="40 0 0 0" />

                            <fa:ImageAwesome x:Name="rightArrowImg" Icon="ToggleOff" Style="{StaticResource buttonIconWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="15 0 0 0"/>
                            <TextBlock x:Name="content2" Text="Off" Style="{StaticResource buttonTextWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="40 0 0 0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="DimGray"/>
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleStyleC" TargetType="ToggleButton">
        <Setter Property="Background" Value="{Binding ButtonBackColor}"/>
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="15" BorderThickness="1">
                        <Grid >
                            <fa:ImageAwesome x:Name="leftArrowImg" Icon="ToggleOn" Style="{StaticResource buttonIconWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center" Margin="15 0 0 0" />
                            <TextBlock x:Name="content1" Text="开" Style="{StaticResource buttonTextWhiteWithIcon}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="40 0 0 0" />

                            <fa:ImageAwesome x:Name="rightArrowImg" Icon="ToggleOff" Style="{StaticResource buttonIconWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="15 0 0 0"/>
                            <TextBlock x:Name="content2" Text="关" Style="{StaticResource buttonTextWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="40 0 0 0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="DimGray"/>
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleStyleCRact" TargetType="ToggleButton">
        <Setter Property="Background" Value="{Binding ButtonBackColor}"/>
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"  CornerRadius="1" BorderThickness="1">
                        <Grid >
                            <fa:ImageAwesome x:Name="leftArrowImg" Icon="ToggleOn" Style="{StaticResource buttonIconWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center" Margin="15 0 0 0" />
                            <TextBlock x:Name="content1" Text="开" Style="{StaticResource buttonTextWhiteWithIcon}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="40 0 0 0" />

                            <fa:ImageAwesome x:Name="rightArrowImg" Icon="ToggleOff" Style="{StaticResource buttonIconWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="15 0 0 0"/>
                            <TextBlock x:Name="content2" Text="关" Style="{StaticResource buttonTextWhite}"  HorizontalAlignment="Left" VerticalAlignment="Center"  Margin="40 0 0 0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="DimGray"/>
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="leftArrowImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="rightArrowImg" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="content1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="content2" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>